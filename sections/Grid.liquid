<!-- Section HTML -->
<section class="popup-section">
  <div class="container">
    <h2>{{ section.settings.section_title }}</h2>
    <div class="grid">
      {% for block in section.blocks %}
        <div class="grid-item">
          {% if block.settings.product_image %}
            <div class="image-wrapper" data-popup="popup-{{ block.id }}">
              <img src="{{ block.settings.product_image | img_url: 'large' }}" alt="{{ block.settings.product_title }}">
              <div class="plus-icon">+</div>
            </div>

            {% assign product = block.settings.product_image %}
            <script>

              all_products.push({
                product : `{{ product.id }}`,
                variants : `{{ product.variants | json }}`
              })
            </script>
            <!-- Popup -->
            <div id="popup-{{ block.id }}" class="popupss">
              <div class="popup-content">
                <span class="close">&times;</span>
                <div class="popup-inner">
                  <div class="popup-image">
                    <div class="products_imagge">
                      <img
                        src="{{ block.settings.product_image | img_url: 'large' }}"
                        alt="{{ block.settings.product_title }}"
                      >
                    </div>
                    <div class="products_details">
                      <h3>{{ block.settings.product_title }}</h3>
                      <p class="price">{{ block.settings.product_price }}</p>
                      <p class="description">{{ block.settings.product_description }}</p>
                    </div>
                  </div>
                  <div data-parent="{{  product.id }}" class="popup-details">
                    <!-- color -->

                    {% for option in product.options_with_values %}
                      {% if option.name == 'Color' %}
                        <div class="{{ option.name }}-options new_colors">
                          <span>{{ option.name }}</span>
                          <div class="{{ option.name }}-choices">
                            {% for value in option.values %}
                              <span
                                class="colorss"
                                style="background-color: {{ value | downcase }};"
                                data-color="{{ value | escape }}"
                              >
                              </span>
                              <label>
                                <div class="{{ option.name }}-option" data-{{ option.name }}="{{ value | strip }}">
                                  <input
                                    type="radio"
                                    name="color-option"
                                    value="{{ value | escape }}"
                                    data-color="{{ value | escape }}"
                                  >
                                  {{ value | strip }}
                                </div>
                              </label>
                            {% endfor %}
                          </div>
                        </div>
                      {% endif %}
                    {% endfor %}

                    <!-- Size Options -->
                    {% for option in product.options_with_values %}
                      {% if option.name == 'Size' %}
                        <div class="dropdown-container">
                          <label class="drop-labels" for="{{ option.name }}">{{ option.name }}</label>
                          <div class="drop-downs">
                            <div class="names">Choose your {{ option.name | downcase }}</div>
                            <span class="emptys"></span>
                          </div>

                          <!-- Initially hidden dropdown list -->
                          <ul
                            class="dropdown-lists"
                            style="max-height: 0; overflow: hidden; transition: max-height 0.3s ease;"
                          >
                            {% for value in option.values %}
                              <li data-value="{{ value | strip }}" class="size-option">{{ value | strip }}</li>
                            {% endfor %}
                          </ul>
                        </div>
                      {% endif %}
                    {% endfor %}

                    <!-- Add to Cart Button -->
                    <form action="/cart/add" method="post" enctype="multipart/form-data" class="add_form">
                      <input type="hidden" name="id" value="{{ product.variants.first.id }}">
                      <button type="submit" data-product="{{ product.id }}" class="add-to-cart">
                        <span>ADD TO CART</span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="36" height="12" viewBox="0 0 36 12" fill="none">
                          <path d="M1.40918 5.25L0.65918 5.25L0.65918 6.75L1.40918 6.75L1.40918 5.25ZM35.639 6.53033C35.9319 6.23744 35.9319 5.76257 35.639 5.46967L30.866 0.696701C30.5731 0.403808 30.0983 0.403808 29.8054 0.696701C29.5125 0.989594 29.5125 1.46447 29.8054 1.75736L34.048 6L29.8054 10.2426C29.5125 10.5355 29.5125 11.0104 29.8054 11.3033C30.0983 11.5962 30.5731 11.5962 30.866 11.3033L35.639 6.53033ZM1.40918 6.75L35.1087 6.75L35.1087 5.25L1.40918 5.25L1.40918 6.75Z" fill="white"/>
                        </svg>
                      </button>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          {% endif %}
        </div>
      {% endfor %}
    </div>
  </div>
</section>
{% schema %}
{
  "name": "Grid",
  "settings": [
    {
      "type": "text",
      "id": "section_title",
      "label": "Section Title",
      "default": "Tisso vision in the wild"
    }
  ],
  "blocks": [
    {
      "type": "image",
      "name": "Product Popup",
      "settings": [
        {
          "type": "product",
          "id": "product_image",
          "label": "Product Image"
        },
        {
          "type": "text",
          "id": "product_title",
          "label": "Product Title",
          "default": "Orange Wide Leg"
        },
        {
          "type": "text",
          "id": "product_price",
          "label": "Product Price",
          "default": "980,00â‚¬"
        },
        {
          "type": "textarea",
          "id": "product_description",
          "label": "Product Description",
          "default": "This one-piece swimsuit is crafted from jersey featuring an allover micro Monogram motif in relief."
        },

      ]
    }
  ],
  "presets": [
    {
      "name": "Grids",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<script>
  document.querySelectorAll('.dropdown-container').forEach(container => {

      const customSelectBox = container.querySelector('.drop-downs');
      const customSelectList = container.querySelector('.dropdown-lists');
      const addToCartForm = document.querySelector('.add_form');

      // Toggle dropdown open/close and rotate arrow
      customSelectBox.addEventListener('click', function() {
        
        container.classList.toggle('active');
      });

      // Select item and update dropdown
      customSelectList.querySelectorAll('li').forEach(item => {
          item.addEventListener('click', function() {
            
              customSelectBox.innerHTML = this.innerHTML;
              container.classList.remove('active'); // Close dropdown after selection
              customSelectList.style.maxHeight = '0'; // Collapse dropdown
              addToCartForm.style.marginTop = '0'; // Move Add to Cart button back up
              // Center the text after selection
              customSelectBox.classList.add('center-text');
          });
      });

      // Close dropdown if clicked outside
      document.addEventListener('click', function(e) {
          if (!container.contains(e.target)) {
              container.classList.remove('active');
          }
      });
  });



    document.addEventListener("DOMContentLoaded", function() {
      var imageWrappers = document.querySelectorAll('.image-wrapper');
      var popups = document.querySelectorAll('.popup');
      var closeButtons = document.querySelectorAll('.close');
      var selectedSize = ""; // Placeholder for selected size

      // Handle image click to show popup
     
      imageWrappers.forEach(function(wrapper) {
        wrapper.addEventListener('click', function() {
           document.querySelectorAll('div.popupss').forEach(function(popup) {
      popup.style.display = 'none';
  });
          var popupId = wrapper.getAttribute('data-popup');
          var popup = document.getElementById(popupId);
          popup.style.display = 'block';
          popup.style.left = wrapper.offsetWidth + 'px'; // Show the popup next to the image
        });
      });

      // Handle close button click to hide popup
      closeButtons.forEach(function(btn) {
        btn.addEventListener('click', function() {
          this.closest('.popup').style.display = 'none';
        });
      });

      // Close the popup if clicked outside of it
      document.addEventListener('click', function(event) {
        popups.forEach(function(popup) {
          if (!popup.contains(event.target) && !event.target.closest('.image-wrapper')) {
            popup.style.display = 'none';
          }
        });
      });

      // Capture the selected size from the list items
      var sizeOptions = document.querySelectorAll('.size-option');
      sizeOptions.forEach(function(option) {
        option.addEventListener('click', function() {
          selectedSize = this.getAttribute('data-value'); // Get the size value from the clicked element
          console.log('Selected Size:', selectedSize); // Debugging
        });
      });

      // Add to Cart functionality
      const addToCartButtons = document.querySelectorAll('.add-to-cart');
      addToCartButtons.forEach(function(button) {
        button.addEventListener('click', function(event) {

          event.stopPropagation(); // Prevent popup close on button click
          var popup = this.closest('.popup-details');

          // Assuming you have access to product and variant IDs in Liquid
          var productId = "{{ product.selected_or_first_available_variant.id }}"; // Or {{ product.id }} for the product ID
          console.log('Product ID:', productId); // Debugging

          var selectedColor = popup.querySelector('.color-options .color-option.selected')?.textContent || ''; // Assuming color options

          // Prepare data for adding to cart
          var data = {
            items: [{
              id: productId,  // Use the productId retrieved earlier
              quantity: 1,
              properties: {
                'Size': selectedSize,  // Use the selected size from earlier
                'Color': selectedColor  // Use the selected color
              }
            }]
          };

          // Send AJAX request to add the item to the cart
     fetch('/cart/add.js', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    },
    body: JSON.stringify(data)
  })
  .then(response => {
    if (response.ok) {
      return response.json();
    } else {
      console.error('Response not OK:', response);
      throw new Error('Network response was not ok. Status: ' + response.status);
    }
  })
  .then(data => {
    console.log('Item added to cart:', data);
  })
  .catch((error) => {
    console.error('There was a problem with the fetch operation:', error);
  });

        });
      });
    });

  //Drop Down Collapse

  document.querySelectorAll('.dropdown-container').forEach(container => {
    const dropdownBox = container.querySelector('.drop-downs');
    const dropdownList = container.querySelector('.dropdown-lists');
    const addToCartForm = document.querySelector('.add_form');

    dropdownBox.addEventListener('click', function() {
      const isOpen = dropdownList.style.maxHeight !== '0px';

      if (!isOpen) {
        dropdownList.style.maxHeight = dropdownList.scrollHeight + 'px'; // Expand dropdown
        addToCartForm.style.marginTop = `${dropdownList.scrollHeight + 20}px`; // Move Add to Cart button down
      } else {
        dropdownList.style.maxHeight = '0'; // Collapse dropdown
        addToCartForm.style.marginTop = '0'; // Move Add to Cart button back up
      }
    });

    // Close dropdown if clicked outside
    document.addEventListener('click', function(e) {
      if (!container.contains(e.target) && dropdownList.style.maxHeight !== '0px') {
        dropdownList.style.maxHeight = '0'; // Collapse dropdown
        addToCartForm.style.marginTop = '0'; // Reset button position
      }
    });
  });

    document.querySelectorAll(".add-to-cart").forEach(atc=>{
      atc.addEventListener("click", function(e){


        e.preventDefault();
        let $this = this;

        let _product = this.dataset.product;
        all_products.forEach(product=>{
      if(product.product == _product){

        let parentObect = document.querySelector('[data-parent="'+ product.product +'"]');

        let size = parentObect.querySelector(".drop-downs").innerText.trim();
        let color = parentObect.querySelector("input:checked").value;
     

        let variants = JSON.parse(product.variants);
        variants.forEach(variant=>{

          if(variant.option1 == size && variant.option2 == color){
          this.closest("form").querySelector("input[name='id']").value = variant.id;
          this.closest("form").submit();

          }
        })
      }
  })
      })
    })

  const closeButtons = document.querySelectorAll('.close');

  closeButtons.forEach(function(button) {
    button.addEventListener('click', function() {

      button.closest('.popupss').style.display = 'none';
    });
  });

  // document.addEventListener('DOMContentLoaded', function () {
  //   const colorOptions = document.querySelectorAll('input[name="color-option"]');
    
  //   colorOptions.forEach(function (colorOption) {
  //     colorOption.addEventListener('change', function () {
  //       const selectedColor = this.value; // Get selected color value
  //       console.log('Selected Color:', selectedColor); // Log or use the selected color

  //       // You can display the selected color somewhere in the UI
  //       document.querySelector('.selected-color-display').textContent = `Selected Color: ${selectedColor}`;
  //     });
  //   });
  // });
</script>
<script>
  // Select all divs with the class .Color-option and .Size-option
  const colorOptions = document.querySelectorAll('.Color-option');
  const sizeOptions = document.querySelectorAll('.size-option');

  // Function to handle selection of options
  function handleSelection(options) {
      options.forEach(option => {
          option.addEventListener('click', function() {
              // Remove the 'selected' class from all options in the same group
              options.forEach(option => option.classList.remove('selected'));

              // Add the 'selected' class to the clicked option
              this.classList.add('selected');
          });
      });
  }

  // Apply the function to color options and size options
  handleSelection(colorOptions);
  handleSelection(sizeOptions);
</script>
<script>
  reverseArray([1,2,3,4,5])
  function reverseArray(array){
    let start=0;
    let end = array.length-1;
    while(start<end)
      {
        let temp=array[start]
        array[start]=array[end]
        array[end]=temp;
        start++;
        end--
      }
    console.log(array)
    return array
  }
</script>
